call plug#begin('~/.vim/plugged')
  " Plugins
  Plug 'junegunn/vim-plug'
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'
  Plug 'heavenshell/vim-jsdoc'
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'
  Plug 'itchyny/lightline.vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'mattn/emmet-vim'
  Plug 'tpope/vim-surround'
  Plug 'sheerun/vim-polyglot'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'raimondi/delimitmate'
  Plug 'ap/vim-css-color'
  Plug 'cakebaker/scss-syntax.vim'
"  Plug 'dense-analysis/ale'
"  Plug 'frazrepo/vim-rainbow'
  Plug 'luochen1990/rainbow'
  Plug 'mattn/emmet-vim'

  Plug 'brooth/far.vim'

  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'

  Plug 'christoomey/vim-tmux-navigator'
  Plug 'christoomey/vim-system-copy'

"  if has('nvim')
"    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"  else
"    Plug 'Shougo/deoplete.nvim'
"    Plug 'roxma/nvim-yarp'
"    " Plug 'roxma/vim-hug-neovim-rpc'
"  endif

  " Snippets
"  Plug 'Shougo/neosnippet.vim'
"  Plug 'Shougo/neosnippet-snippets'

  " Theme
  Plug 'dracula/vim', { 'as': 'dracula' }
call plug#end()

" UI stuff
syntax on
set nu rnu
set background=dark
set noshowmode
set backspace=indent,eol,start
set conceallevel=0

" Omnifunction
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" vim options that make plugins better
set updatetime=100
set laststatus=2

" indentation stuff
set autoindent
set smartindent
set pastetoggle=<F2>

" enable folding and stuff
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2

" tabs and spaces
set tabstop=2
set shiftwidth=2
set expandtab

" snippets
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" mouse support
set mouse=a

" NERDTree toggle shortcut
map <C-n> :NERDTreeToggle<CR>

nmap <Leader>r :NERDTreeFocus<cr>R<c-w><c-p>

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('scss', 'Magenta', 'none', '#ff00ff', '#151515')

" NERDTree git plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" Emmet only enabled for HTML/CSS
let g:user_emmet_install_global = 0
autocmd FileType html,erb.html,css,scss EmmetInstall

" enable rainbow parens for everything
let g:rainbow_active = 1

" Deoplete init
let g:deoplete#enable_at_startup = 1

" tab tweak
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" solargraph init
let g:LanguageClient_serverCommands = {
    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    \ }

